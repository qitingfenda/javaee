类加载子系统的作用：
类加载子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。
ClassLoader只负责class文件的加载，至于它是否可以运行，则有ExecutionEngine决定。
加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会有存放运行时常量池信息，
可能还包括字符串变量和数字常量(这部分信息是Class文件中常量池部分的内存映射)。

加载：
1.通过一个类的全限定名获取定义此类的二进制字节流。
2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
3.在内存中生成一个代表类的java.lang.Class对象，作为方法区这个类的各个数据的访问入口。
加载.class文件的方式
 - 从本地系统中直接加载
 - 通过网络获取，典型场景：Web Applet
 - 从zip压缩包中读取，后为日后jar、war格式的基础
 - 运行时计算生成，使用最多的是：动态代理技术
 - 其它文件生成，典型场景：JSP应用
 - 从专有数据库中提取.class文件，比较少见
 - 从加密文件中获取，典型的防Class文件被反编译的保护措施

链接:
验证(Verify)
 - 目前在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。
 - 主要包括四种验证：文件格式验证、元数据验证、字节码验证、符号引用验证。
准备(Prepare)
 - 为类变量分配内存并设置该类变量的默认初始值，即零值。
 - 这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化。
 - 这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。
解析(Resolve)
 - 将常量池内的符号引用转换为直接引用的过程。
 - 事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。
 - 符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中。
   直接引用就是直接指向目标的指针、相对偏移量或一个直接定位到目标的句柄。
 - 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的
   CONSTANT_Class_info CONSTANT_Fieldref_info CONSTANT_Methodref_info等。

初始化
初始化阶段就是执行类构造器方法<clinit>()的过程。
此方法不需要要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。
构造器方法中指令按语句在源文件中出现的顺序执行。
<clinit>()不同于类的构造器。(关联：构造器是虚拟机视角下的<>(init))
若该类具有父类，JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕。
虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁。

类的加载器的分类：
JVM支持两种类型的类加载器，分别为引导类加载器(Bootstrap ClassLoader)和自定义加载器(User-Defined ClassLoader)。
从概念上来讲，自定义类的加载器一般指的是程序中开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，
而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。
无论类加载器的类型如何划分，在程序中我们最常见的类加载器时中只有3个。

虚拟机自带的加载器
启动类加载器(引导类加载器，Bootstrap ClassLoader)
 - 这个类加载器使用c/c++语言实现的，嵌套在JVM内部。
 - 它用来加载Java的核心库(JAVA_HOME/jre/lib/rt.jar、resource.jar或sun.boot.class.path路径下的内容)，用于提供JVM自身需要的类
 - 并不继承子java.lang.ClassLoader。没有父加载器
 - 加载扩展类和应用程序类加载器，并指定它为他们的父类加载器。
 - 出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun开头的类
扩展类加载器(Extension ClassLoader)
 - Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。
 - 派生于ClassLoader类
 - 父类加载器为启动类加载器
 - 从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录(扩展目录)下加载类库。
   如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。
应用程序类加载器(系统类加载器，AppClassLoader)
 - java语言编写，由sun.misc.Launcher$AppClassLoader实现
 - 派生于ClassLoader类
 - 父类加载器为扩展类加载器
 - 它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库
 - 该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载
 - 通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器
用户自定义类加载器
 - 在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类的加载器，来定制类的加载方式。
为什么要自定义类加载器？
 - 隔离加载类
 - 修改类的加载方式
 - 扩展加载源
 - 防止源码泄露

用户自定义类加载器实现步骤：
 - 开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求
 - 在JDK1.2之前，在之定义类加载是，总会去继承ClassLoader类并重写loadClass()方法，从而实现自定义类加载器，
   但是在JDK1.2之后已不再建议用户自己去覆盖loadClass()方法，而是建议把自定义类的加载逻辑卸载findClass中
 - 在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()
   方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。

关于ClassLoader
ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader(不包括启动类加载器)
方法及描述：
getParent()：返回该类加载器的超类加载器
loadClass(String name)：加载名称为name的类，返回结果为java.lang.Class类的实例
findClass(String name)：查找名称为name的类，返回结果为java.lang.Class类的实例
findLoadedClass(String name)：查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例
defineClass(String name,byte[] b,int off,int len)：把字节数组b中的内容转换为一个Java类，返回结果为java.lang.Class类的实例
resolveClass(Class<?> c)：连接指定的一个Java类

获取ClassLoader的途径：
方式一：获取当前类的ClassLoader
clazz.getClassLoader
方式二：获取当前线程上下文的ClassLoader
Thread.currentThread.getContextClassLoader()
方式三：获取系统的ClassLoader
ClassLoader.getSystemClassLoader()
方式四：获取调用者的ClassLoader
DriverManager.getCallerClassLoader()

在JVM中表示两个class对象是否为同一个类存在两个必要条件：
 - 类的完整类名必须一致，包括包名。
 - 加载这个类的ClassLoader(指ClassLoader实例对象)必须相同。
换句话说，在JVM中，即使两个类对象(class对象)来源同一个Class文件，被同一个虚拟机所加载，
但只要它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。

JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。
如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。
当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。

类的主动使用和被动使用
Java程序对类的使用方式分为：主动使用和被动使用
主动使用，又分为七种情况：
 - 创建类的实例
 - 访问某个类或接口的静态变量，或者对该静态类变量赋值
 - 调用类的静态方法
 - 反射(比如：Class.forName("java.lang.String"))
 - 初始化一个类的子类
 - Java虚拟机启动时被标名为启动类的类
 - JDK7开始提供的动态语言支持：
   java.lang.invoke.MethodHandle实例的解析结果
   REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应用类没有初始化，则初始化
除了以上七种情况，其它使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。




































